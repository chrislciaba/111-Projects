Christian Ciabattoni
004331063

2C.1A
The reason that we see an upward trending graph here is because there is a lower probability of collisions (i.e. multiple threads trying to grab the same lock) the larger the list gets and also the more threads that access a list the higher the probability of collisions of threads trying to acquire the same lock. 

2C.1B
This is a better measurement because it gives information on how likely it is that two threads will collide. If no information is known about the number of lists we have, then we cannot see the trend that emerges when multiple threads are trying to grab locks simultaneously and can only make inferences about thread overhead and such affecting performance.



Performance Analysis
The SortedList functions are the same as the ones in the header file. hash_bucket computes which spot in the hash table the list we want is in, and the ht function are all the functions that perform the insert/delete/sum things using the SortedList functions.
******************No locks with one thread and one list***************
-5000 Iterations:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
100.19      0.02     0.02     5000     4.01     4.01  SortedList_insert
  0.00      0.02     0.00    10000     0.00     0.00  hash_bucket
  0.00      0.02     0.00     5000     0.00     0.00  SortedList_delete
  0.00      0.02     0.00     5000     0.00     0.00  SortedList_lookup
  0.00      0.02     0.00     5000     0.00     0.00  ht_delete
  0.00      0.02     0.00     5000     0.00     4.01  ht_insert
  0.00      0.02     0.00        2     0.00     0.00  SortedList_length
  0.00      0.02     0.00        2     0.00     0.00  ht_sum

-10000 Iterations:
 %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 64.41      0.09     0.09    10000     9.02     9.02  SortedList_lookup
 35.78      0.14     0.05    10000     5.01     5.01  SortedList_insert
  0.00      0.14     0.00    20000     0.00     0.00  hash_bucket
  0.00      0.14     0.00    10000     0.00     0.00  SortedList_delete
  0.00      0.14     0.00    10000     0.00     9.02  ht_delete
  0.00      0.14     0.00    10000     0.00     5.01  ht_insert
  0.00      0.14     0.00        2     0.00     0.00  SortedList_length
  0.00      0.14     0.00        2     0.00     0.00  ht_sum

-15000 Iterations:
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 50.09      0.19     0.19    15000    12.69    12.69  SortedList_insert
 50.09      0.38     0.19    15000    12.69    12.69  SortedList_lookup
  0.00      0.38     0.00    30000     0.00     0.00  hash_bucket
  0.00      0.38     0.00    15000     0.00     0.00  SortedList_delete
  0.00      0.38     0.00    15000     0.00    12.69  ht_delete
  0.00      0.38     0.00    15000     0.00    12.69  ht_insert
  0.00      0.38     0.00        2     0.00     0.00  SortedList_length
  0.00      0.38     0.00        2     0.00     0.00  ht_sum

-20000 Iterations:
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 50.09      0.29     0.29    20000    14.53    14.53  SortedList_lookup
 50.09      0.58     0.29    20000    14.53    14.53  SortedList_insert
  0.00      0.58     0.00    40000     0.00     0.00  hash_bucket
  0.00      0.58     0.00    20000     0.00     0.00  SortedList_delete
  0.00      0.58     0.00    20000     0.00    14.53  ht_delete
  0.00      0.58     0.00    20000     0.00    14.53  ht_insert
  0.00      0.58     0.00        2     0.00     0.00  SortedList_length
  0.00      0.58     0.00        2     0.00     0.00  ht_sum

-25000 Iterations:
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 57.69      0.57     0.57    25000    22.84    22.84  SortedList_insert
 42.50      0.99     0.42    25000    16.83    16.83  SortedList_lookup
  0.00      0.99     0.00    50000     0.00     0.00  hash_bucket
  0.00      0.99     0.00    25000     0.00     0.00  SortedList_delete
  0.00      0.99     0.00    25000     0.00    16.83  ht_delete
  0.00      0.99     0.00    25000     0.00    22.84  ht_insert
  0.00      0.99     0.00        2     0.00     0.00  SortedList_length
  0.00      0.99     0.00        2     0.00     0.00  ht_sum

****************Mutex Lock, 16 Threads, 2000 Iterations****************

-1 List
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 56.07      0.61     0.61    31984    19.11    19.11  SortedList_insert
 44.12      1.09     0.48    31995    15.03    15.03  SortedList_lookup
  0.00      1.09     0.00   127953     0.00     0.00  hash_bucket
  0.00      1.09     0.00    31999     0.00     0.00  SortedList_delete
  0.00      1.09     0.00    31997     0.00    15.03  ht_delete
  0.00      1.09     0.00    31997     0.00    19.10  ht_insert
  0.00      1.09     0.00       17     0.00     0.00  SortedList_length
  0.00      1.09     0.00       17     0.00     0.00  ht_sum

-2 Lists
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 52.14      0.51     0.51    31767     0.02     0.02  SortedList_insert
 44.98      0.95     0.44    31722     0.01     0.01  SortedList_lookup
  2.04      0.97     0.02       32     0.63     0.63  SortedList_length
  1.02      0.98     0.01    31694     0.00     0.01  ht_delete
  0.00      0.98     0.00   127009     0.00     0.00  hash_bucket
  0.00      0.98     0.00    31791     0.00     0.00  SortedList_delete
  0.00      0.98     0.00    31727     0.00     0.02  ht_insert
  0.00      0.98     0.00       16     0.00     1.25  ht_sum

-3 Lists
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 53.67      0.30     0.30    31300     9.60     9.60  SortedList_lookup
 44.73      0.55     0.25    31394     7.98     7.98  SortedList_insert
  1.79      0.56     0.01       51   196.45   196.45  SortedList_length
  0.00      0.56     0.00   125428     0.00     0.00  hash_bucket
  0.00      0.56     0.00    31357     0.00     7.99  ht_insert
  0.00      0.56     0.00    31335     0.00     0.00  SortedList_delete
  0.00      0.56     0.00    31249     0.00     9.62  ht_delete
  0.00      0.56     0.00       17     0.00   589.35  ht_sum

-4 Lists
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 47.03      0.23     0.23    30875     0.01     0.01  SortedList_lookup
 38.85      0.42     0.19    30832     0.01     0.01  SortedList_insert
  6.13      0.45     0.03                             run
  4.09      0.47     0.02       67     0.30     0.30  SortedList_length
  2.04      0.48     0.01   123180     0.00     0.00  hash_bucket
  2.04      0.49     0.01    30611     0.00     0.01  ht_delete
  0.00      0.49     0.00    30773     0.00     0.01  ht_insert
  0.00      0.49     0.00    30757     0.00     0.00  SortedList_delete
  0.00      0.49     0.00       17     0.00     1.18  ht_sum

-5 Lists
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 50.09      0.17     0.17    30298     5.62     5.62  SortedList_insert
 50.09      0.34     0.17    30255     5.63     5.63  SortedList_lookup
  0.00      0.34     0.00   120961     0.00     0.00  hash_bucket
  0.00      0.34     0.00    30180     0.00     5.64  ht_insert
  0.00      0.34     0.00    30099     0.00     0.00  SortedList_delete
  0.00      0.34     0.00    29936     0.00     5.69  ht_delete
  0.00      0.34     0.00       84     0.00     0.00  SortedList_length
  0.00      0.34     0.00       17     0.00     0.00  ht_sum


*****************Spin Lock, 16 Threads, 2000 Iterations****************

-1 List
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 97.25    101.60   101.60                             run
  1.75    103.43     1.82    31807     0.06     0.06  SortedList_insert
  1.14    104.62     1.19    31917     0.04     0.04  SortedList_lookup
  0.02    104.64     0.02       17     1.18     2.36  ht_sum
  0.02    104.66     0.02       16     1.25     1.25  SortedList_length
  0.01    104.67     0.01   126829     0.00     0.00  hash_bucket
  0.01    104.68     0.01    31216     0.00     0.06  ht_insert
  0.00    104.68     0.00    32000     0.00     0.00  SortedList_delete
  0.00    104.68     0.00    31545     0.00     0.04  ht_delete

-2 Lists
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 92.76     21.00    21.00                             run
  4.60     22.04     1.04    30469     0.03     0.03  SortedList_insert
  2.66     22.64     0.60    30721     0.02     0.02  SortedList_lookup
  0.13     22.67     0.03       31     0.97     0.97  SortedList_length
  0.04     22.68     0.01       17     0.59     2.36  ht_sum
  0.00     22.68     0.00   120663     0.00     0.00  hash_bucket
  0.00     22.68     0.00    31713     0.00     0.00  SortedList_delete
  0.00     22.68     0.00    29858     0.00     0.02  ht_delete
  0.00     22.68     0.00    28777     0.00     0.04  ht_insert

-3 Lists
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 85.38      6.58     6.58                             run
  7.28      7.14     0.56    30327     0.02     0.02  SortedList_insert
  7.02      7.68     0.54    30546     0.02     0.02  SortedList_lookup
  0.26      7.70     0.02       48     0.42     0.42  SortedList_length
  0.26      7.72     0.02       17     1.18     2.36  ht_sum
  0.00      7.72     0.00   121490     0.00     0.00  hash_bucket
  0.00      7.72     0.00    31149     0.00     0.00  SortedList_delete
  0.00      7.72     0.00    29400     0.00     0.02  ht_delete
  0.00      7.72     0.00    28885     0.00     0.02  ht_insert

-4 Lists
 %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 71.70      2.29     2.29                             run
 18.79      2.90     0.60    28779     0.02     0.02  SortedList_insert
  9.08      3.19     0.29    29223     0.01     0.01  SortedList_lookup
  0.63      3.21     0.02       58     0.35     0.35  SortedList_length
  0.00      3.21     0.00   116391     0.00     0.00  hash_bucket
  0.00      3.21     0.00    30597     0.00     0.00  SortedList_delete
  0.00      3.21     0.00    27741     0.00     0.01  ht_delete
  0.00      3.21     0.00    27068     0.00     0.02  ht_insert
  0.00      3.21     0.00       17     0.00     1.18  ht_sum

-5 Lists
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 56.29      1.09     1.09                             run
 22.21      1.52     0.43    27881    15.45    15.45  SortedList_insert
 21.17      1.93     0.41    27854    14.75    14.75  SortedList_lookup
  0.52      1.94     0.01       78   128.45   128.45  SortedList_length
  0.00      1.94     0.00   112961     0.00     0.00  hash_bucket
  0.00      1.94     0.00    29709     0.00     0.00  SortedList_delete
  0.00      1.94     0.00    26320     0.00    15.61  ht_delete
  0.00      1.94     0.00    26171     0.00    16.46  ht_insert
  0.00      1.94     0.00       17     0.00   589.35  ht_sum

2C.2A
The time per operation goes down as the size of the list increases. The reason is that the time to access/add/delete elements in a larger list is much less the larger the list gets. The reason is that if we have a list of n elements, there is an O(n) time to access/add/delete elements whereas for a hash table with buckets we have constructed, the array access time is O(1) and the list access time is O(n/k), where k is the number of buckets we have, which gives us an O(n/k) access/add/delete time which will also help speed things up a lot.

2C.2B
The time per operation of the mutex is less than that of the spin lock. The reason is that when we have a list, first off the spinning affects performance since we waste CPU cycles on the spinning and as the list gets larger, we have more and more locks spinning simultaneously and affecting performance whereas a mutex simply allows execution once another thread gives up the lock.

2C.3A
Because otherwise we could get into a race condition. If we do not have the lock when we are being put to sleep another thread could interfere with the process of that thread going to sleep. For example, if one thread signaled to wake up at the same time we were being put to sleep, then we could lose the signal and sleep forever. There are other things that could happen depending on implementation, but sleeping forever is a large concern.

2C.3B
Because if we go into the blocked state, some event needs to signal the thread to move back to the ready state. If we go into the blocked state with the mutex, no other thread will ever be able to wake us up or do anything involving that lock.

2C.3C:
Because if we don’t reacquire it we can get into race conditions again. Since we slept for a reason (most likely to wait on other threads before we continue execution), if we do not reacquire the lock when we get woken up, other threads may be able to manipulate the data we wanted to process or something and cause correctness issues and potentially other sleep/wakeup races.

2C.3D:
Because if we called it before wait, we could get into sleep/wakeup races again. If we don’t wait until the thread is completely asleep before releasing the mutex, another thread could call the wakeup function while we are about to go to sleep and we would never get signaled.

2C.3E:
You could, but it would be difficult and prone to errors and is something that should be hidden from the user.Since when we call wait, we have to make sure that we disable interrupts while a thread is going to sleep since if the thread sleeps and then we never actually release the lock that could cause problems. Also this would rely heavily on the use of various system calls to make sure that we are using a mutex that cannot be preempted, disabling interrupts, etc. and overall would make much more sense to do in kernel mode since you have access to everything you would need for that.
